{"name":"Node.js Scoped HTTP Client","body":"[Node.js's HTTP client][client] is great, but a little too low level for \r\ncommon purposes.  It's common practice for [some libraries][example] to\r\nextract this out so it's a bit nicer to work with.\r\n\r\n[client]:  http://nodejs.org/api.html#http-client-177\r\n[example]: http://github.com/technoweenie/nori/blob/2b4b367350e5d2aed982e8af869401ab5612378c/lib/index.js#L72-76\r\n\r\n```javascript\r\nfunction(method, path, customHeaders, body, callback) {\r\n  var client = http.createClient(...)\r\n  client.request(method, path, headers)\r\n  ...\r\n}\r\n```\r\n\r\nI hate functions with lots of optional arguments.  Let's turn that into:\r\n\r\n```javascript\r\nvar scopedClient = require('./lib')\r\n  , util         = require('util')\r\n\r\nvar client = scopedClient.create('http://github.com/api/v2/json')\r\n  .header('accept', 'application/json')\r\n  .path('user/show/technoweenie')\r\n  .get()(function(err, resp, body) {\r\n    util.puts(body)\r\n  })\r\n```\r\n\r\nYou can scope a client to make requests with certain parameters without\r\naffecting the main client instance:\r\n\r\n```javascript\r\nclient.path('/api/v2/json') // reset path\r\nclient.scope('user/show/marak', function(cli) {\r\n  cli.get()(function(err, resp, body) {\r\n    util.puts(body)\r\n  })\r\n})\r\n```\r\n\r\nYou can use `.post()`, `.put()`, `.del()`, and `.head()`.\r\n\r\n```javascript\r\nclient.query({login:'technoweenie',token:'...'})\r\n  .scope('user/show/technoweenie', function(cli) {\r\n    var data = JSON.stringify({location: 'SF'})\r\n\r\n    // posting data!\r\n    cli.post(data)(function(err, resp, body) {\r\n      util.puts(body)\r\n    })\r\n  })\r\n```\r\n\r\nSometimes you want to stream the request body to the server.  The request \r\nis a standard [http.clientRequest][request].\r\n\r\n```javascript\r\nclient.post(function (req) {\r\n  req.write(...)\r\n  req.write(...)\r\n})(function(err, resp, body) {\r\n  ...\r\n})\r\n```\r\n\r\nAnd other times, you want to stream the response from the server.  Simply \r\nlisten for the request's response event yourself and omit the response \r\ncallback.\r\n\r\n```javascript\r\nclient.get(function (err, req) {\r\n  // do your own thing\r\n  req.addListener('response', function (resp) {\r\n    resp.addListener('data', function (chunk) {\r\n      util.puts(\"CHUNK: \" + chunk)\r\n    })\r\n  })\r\n})()\r\n```\r\n\r\n[request]: http://nodejs.org/api.html#http-clientrequest-182\r\n\r\nBasic HTTP authentication is supported:\r\n\r\n```javascript\r\nclient.get(function (err, req) {\r\n  // we'll keep this conversation secret...\r\n  req.auth('technoweenie', '...')\r\n})\r\n```\r\n\r\n## Development\r\n\r\nRun this in the main directory to compile coffeescript to javascript as you go:\r\n\r\n    $ coffee -wc -o lib --no-wrap src/**/*.coffee","tagline":"","google":""}